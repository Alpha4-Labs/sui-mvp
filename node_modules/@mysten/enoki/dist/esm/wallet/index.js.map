{
  "version": 3,
  "sources": ["../../../src/wallet/index.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SuiClient } from '@mysten/sui/client';\nimport { Transaction } from '@mysten/sui/transactions';\nimport { fromBase64, toBase64 } from '@mysten/sui/utils';\nimport type {\n\tIdentifierArray,\n\tIdentifierString,\n\tStandardConnectFeature,\n\tStandardConnectMethod,\n\tStandardDisconnectFeature,\n\tStandardDisconnectMethod,\n\tStandardEventsFeature,\n\tStandardEventsOnMethod,\n\tSuiSignAndExecuteTransactionFeature,\n\tSuiSignAndExecuteTransactionMethod,\n\tSuiSignPersonalMessageFeature,\n\tSuiSignPersonalMessageMethod,\n\tSuiSignTransactionFeature,\n\tSuiSignTransactionMethod,\n\tWallet,\n} from '@mysten/wallet-standard';\nimport { getWallets, ReadonlyWalletAccount } from '@mysten/wallet-standard';\nimport type { Emitter } from 'mitt';\nimport mitt from 'mitt';\n\nimport type { AuthProvider } from '../EnokiClient/type.js';\nimport { ENOKI_PROVIDER_WALLETS_INFO } from './providers.js';\nimport { INTERNAL_ONLY_EnokiFlow } from './state.js';\nimport type { RegisterEnokiWalletsOptions, WalletEventsMap } from './types.js';\n\nexport class EnokiWallet implements Wallet {\n\t#events: Emitter<WalletEventsMap>;\n\t#accounts: ReadonlyWalletAccount[];\n\t#name: string;\n\t#id: string;\n\t#icon: Wallet['icon'];\n\t#flow: INTERNAL_ONLY_EnokiFlow;\n\t#provider: AuthProvider;\n\t#clientId: string;\n\t#redirectUrl: string | undefined;\n\t#extraParams: Record<string, string> | undefined;\n\t#client;\n\t#windowFeatures?: string | (() => string);\n\n\tget id() {\n\t\treturn this.#id;\n\t}\n\n\tget name() {\n\t\treturn this.#name;\n\t}\n\n\tget provider() {\n\t\treturn this.#provider;\n\t}\n\n\tget icon() {\n\t\treturn this.#icon;\n\t}\n\n\tget version() {\n\t\treturn '1.0.0' as const;\n\t}\n\n\tget chains() {\n\t\treturn [`sui:${this.#flow.network}`] as const;\n\t}\n\n\tget accounts() {\n\t\treturn this.#accounts;\n\t}\n\n\tget features(): StandardConnectFeature &\n\t\tStandardDisconnectFeature &\n\t\tStandardEventsFeature &\n\t\tSuiSignTransactionFeature &\n\t\tSuiSignAndExecuteTransactionFeature &\n\t\tSuiSignPersonalMessageFeature {\n\t\treturn {\n\t\t\t'standard:connect': {\n\t\t\t\tversion: '1.0.0',\n\t\t\t\tconnect: this.#connect,\n\t\t\t},\n\t\t\t'standard:disconnect': {\n\t\t\t\tversion: '1.0.0',\n\t\t\t\tdisconnect: this.#disconnect,\n\t\t\t},\n\t\t\t'standard:events': {\n\t\t\t\tversion: '1.0.0',\n\t\t\t\ton: this.#on,\n\t\t\t},\n\t\t\t'sui:signTransaction': {\n\t\t\t\tversion: '2.0.0',\n\t\t\t\tsignTransaction: this.#signTransaction,\n\t\t\t},\n\t\t\t'sui:signAndExecuteTransaction': {\n\t\t\t\tversion: '2.0.0',\n\t\t\t\tsignAndExecuteTransaction: this.#signAndExecuteTransaction,\n\t\t\t},\n\t\t\t'sui:signPersonalMessage': {\n\t\t\t\tversion: '1.1.0',\n\t\t\t\tsignPersonalMessage: this.#signPersonalMessage,\n\t\t\t},\n\t\t};\n\t}\n\n\tconstructor({\n\t\tname,\n\t\ticon,\n\t\tflow,\n\t\tprovider,\n\t\tclientId,\n\t\tredirectUrl,\n\t\textraParams,\n\t\tclient,\n\t\twindowFeatures,\n\t}: {\n\t\ticon: Wallet['icon'];\n\t\tname: string;\n\t\tflow: INTERNAL_ONLY_EnokiFlow;\n\t\tprovider: AuthProvider;\n\t\tclientId: string;\n\t\tredirectUrl?: string;\n\t\textraParams?: Record<string, string>;\n\t\tclient: SuiClient;\n\t\twindowFeatures?: string | (() => string);\n\t}) {\n\t\tthis.#accounts = [];\n\t\tthis.#events = mitt();\n\n\t\tthis.#client = client;\n\t\tthis.#name = name;\n\t\tthis.#id = `enoki:${provider}:${flow.network}:${clientId}`;\n\t\tthis.#icon = icon;\n\t\tthis.#flow = flow;\n\t\tthis.#provider = provider;\n\t\tthis.#clientId = clientId;\n\t\tthis.#redirectUrl = redirectUrl;\n\t\tthis.#extraParams = extraParams;\n\t\tthis.#windowFeatures = windowFeatures;\n\n\t\tthis.#setAccount();\n\t}\n\n\t#signTransaction: SuiSignTransactionMethod = async ({ transaction, chain, account }) => {\n\t\tthis.#validateChain(chain);\n\n\t\tconst parsedTransaction = Transaction.from(await transaction.toJSON());\n\t\tconst keypair = await this.#flow.getKeypair();\n\t\tconst suiAddress = keypair.toSuiAddress();\n\n\t\tif (suiAddress !== account.address) {\n\t\t\tthrow new Error(\n\t\t\t\t`The specified account ${account.address} does not match the currently connected Enoki address ${suiAddress}.`,\n\t\t\t);\n\t\t}\n\n\t\tparsedTransaction.setSenderIfNotSet(suiAddress);\n\t\treturn keypair.signTransaction(await parsedTransaction.build({ client: this.#client }));\n\t};\n\n\t#signAndExecuteTransaction: SuiSignAndExecuteTransactionMethod = async ({\n\t\ttransaction,\n\t\tchain,\n\t\taccount,\n\t}) => {\n\t\tconst { signature, bytes } = await this.#signTransaction({ transaction, account, chain });\n\t\tconst { digest, rawEffects } = await this.#client.executeTransactionBlock({\n\t\t\ttransactionBlock: bytes,\n\t\t\tsignature,\n\t\t\toptions: {\n\t\t\t\tshowRawEffects: true,\n\t\t\t},\n\t\t});\n\n\t\treturn {\n\t\t\tdigest,\n\t\t\tsignature,\n\t\t\tbytes,\n\t\t\teffects: toBase64(Uint8Array.from(rawEffects!)),\n\t\t};\n\t};\n\n\t#signPersonalMessage: SuiSignPersonalMessageMethod = async ({ message, account, chain }) => {\n\t\tthis.#validateChain(chain);\n\n\t\tconst keypair = await this.#flow.getKeypair();\n\t\tconst suiAddress = keypair.toSuiAddress();\n\n\t\tif (suiAddress !== account.address) {\n\t\t\tthrow new Error(\n\t\t\t\t`The specified account ${account.address} does not match the currently connected Enoki address ${suiAddress}.`,\n\t\t\t);\n\t\t}\n\n\t\treturn keypair.signPersonalMessage(message);\n\t};\n\n\t#on: StandardEventsOnMethod = (event, listener) => {\n\t\tthis.#events.on(event, listener);\n\t\treturn () => this.#events.off(event, listener);\n\t};\n\n\t#setAccount() {\n\t\tconst state = this.#flow.$zkLoginState.get();\n\t\tif (state.address && state.publicKey) {\n\t\t\tthis.#accounts = [\n\t\t\t\tnew ReadonlyWalletAccount({\n\t\t\t\t\taddress: state.address,\n\t\t\t\t\tchains: this.chains,\n\t\t\t\t\tfeatures: Object.keys(this.features) as IdentifierArray,\n\t\t\t\t\tpublicKey: fromBase64(state.publicKey),\n\t\t\t\t}),\n\t\t\t];\n\t\t} else {\n\t\t\tthis.#accounts = [];\n\t\t}\n\n\t\tthis.#events.emit('change', { accounts: this.accounts });\n\t}\n\n\t#connect: StandardConnectMethod = async (input) => {\n\t\tthis.#setAccount();\n\n\t\tif (this.accounts.length || input?.silent) {\n\t\t\treturn { accounts: this.accounts };\n\t\t}\n\n\t\tconst popup = window.open(\n\t\t\tundefined,\n\t\t\t'_blank',\n\t\t\ttypeof this.#windowFeatures === 'function' ? this.#windowFeatures() : this.#windowFeatures,\n\t\t);\n\t\tif (!popup) {\n\t\t\tthrow new Error('Failed to open popup');\n\t\t}\n\n\t\tconst url = await this.#flow.createAuthorizationURL({\n\t\t\tprovider: this.#provider,\n\t\t\tclientId: this.#clientId,\n\t\t\tredirectUrl: this.#redirectUrl ?? window.location.href.split('#')[0],\n\t\t\textraParams: this.#extraParams,\n\t\t});\n\n\t\tpopup.location = url;\n\n\t\tawait new Promise<void>((resolve, reject) => {\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\ttry {\n\t\t\t\t\tif (popup.closed) {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\treject(new Error('Popup closed'));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!popup.location.hash) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tclearInterval(interval);\n\n\t\t\t\tthis.#flow.handleAuthCallback(popup.location.hash).then(() => resolve(), reject);\n\n\t\t\t\ttry {\n\t\t\t\t\tpopup.close();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t}, 16);\n\t\t});\n\n\t\tthis.#setAccount();\n\n\t\treturn { accounts: this.accounts };\n\t};\n\n\t#disconnect: StandardDisconnectMethod = async () => {\n\t\tawait this.#flow.logout();\n\n\t\tthis.#setAccount();\n\t};\n\n\t#validateChain(chain?: IdentifierString): asserts chain is (typeof this.chains)[number] {\n\t\tif (!chain || !this.chains.includes(chain as (typeof this.chains)[number])) {\n\t\t\tthrow new Error(\n\t\t\t\t`A valid Sui chain identifier was not provided in the request. Please report this issue to the dApp developer. Examples of valid Sui chain identifiers are 'sui:testnet' and 'sui:mainnet'. Consider using the '@mysten/dapp-kit' package, which provides this value automatically.`,\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport function registerEnokiWallets({\n\tproviders,\n\tclient,\n\tnetwork = 'mainnet',\n\twindowFeatures = defaultWindowFeatures,\n\t...config\n}: RegisterEnokiWalletsOptions) {\n\tconst walletsApi = getWallets();\n\tconst flow = new INTERNAL_ONLY_EnokiFlow({ ...config, network });\n\n\tconst unregisterCallbacks: (() => void)[] = [];\n\tconst wallets: Partial<Record<AuthProvider, EnokiWallet>> = {};\n\n\tfor (const { name, icon, provider } of ENOKI_PROVIDER_WALLETS_INFO) {\n\t\tconst providerOptions = providers[provider];\n\t\tif (providerOptions) {\n\t\t\tconst { clientId, redirectUrl, extraParams } = providerOptions;\n\t\t\tconst wallet = new EnokiWallet({\n\t\t\t\tname,\n\t\t\t\ticon,\n\t\t\t\tflow,\n\t\t\t\tprovider,\n\t\t\t\tclientId,\n\t\t\t\tclient,\n\t\t\t\tredirectUrl,\n\t\t\t\textraParams,\n\t\t\t\twindowFeatures,\n\t\t\t});\n\n\t\t\tconst unregister = walletsApi.register(wallet);\n\t\t\tunregisterCallbacks.push(unregister);\n\n\t\t\twallets[provider] = wallet;\n\t\t}\n\t}\n\n\treturn {\n\t\twallets,\n\t\tunregister: () => {\n\t\t\tfor (const unregister of unregisterCallbacks) {\n\t\t\t\tunregister();\n\t\t\t}\n\t\t},\n\t};\n}\n\nexport function isEnokiWallet(wallet: Wallet): wallet is EnokiWallet {\n\treturn !!wallet.id?.startsWith('enoki:');\n}\n\nexport function defaultWindowFeatures() {\n\tconst width = 500;\n\tconst height = 800;\n\tconst left = (screen.width - width) / 2;\n\tconst top = (screen.height - height) / 4;\n\n\treturn `popup=1;toolbar=0;status=0;resizable=1,width=${width},height=${height},top=${top},left=${left}`;\n}\n"],
  "mappings": "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",
  "names": []
}
