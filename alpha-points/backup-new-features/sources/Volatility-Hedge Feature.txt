Alpha4 — Volatility-Hedge Feature
Implementation Plan (Move-level, guard-rails, no code dump)
________________


0 · Objective
Allow a user who already holds Alpha Points (backed by staked/escrowed assets) to lock a portion of those points and receive a “hedge asset” that tracks a stable-unit (USDC) so they can weather rapid price drops (e.g., LP hack, market crash) without panic-selling the underlying stake.
________________


1 · Core Design Primitives
New Object / Type
	Purpose
	Key Abilities
	struct HedgeVault has key
	Global pool holding protocol-owned USDC/SUI reserve used to honour hedged redemptions.
	Stores total_usdc, available_quota_pts, paused
	struct HedgeTicket has key, store
	Account-bound object minted when user locks points; records pts_locked, locked_epoch, unlock_after (e.g. 7 days).
	Non-transferable; redeemable for USDC at peg.
	struct HedgeParams (inside admin)
	Config: peg_rate (1 pt = $1), max_daily_hedge_pts, fee_bps, min_lock_epochs.
	Upgradable via GovernCap.
	No fungible new token; keeps complexity low.
________________


2 · User Flow
1. Lock for Hedge
 Call hedge::create_ticket(user_addr, pts_to_lock, ledger, vault, clock)
 Checks:

   * wallet has ≥ pts_to_lock available

   * pts_to_lock ≤ HedgeParams.max_daily_hedge_pts

   * vault.available_quota_pts ≥ pts_to_lock

      2. Effects:

         * Burns pts_to_lock from Ledger.available and increments Ledger.locked (hedge-locked category).

         * Decrements vault.available_quota_pts.

         * Mints HedgeTicket to user.

            3. Redeem Hedge (after min epochs)
hedge::redeem(ticket, ledger, vault, clock)

               * Verifies clock.epoch ≥ ticket.unlock_after.

               * Transfers pts_locked * peg_rate worth of USDC coins from vault to user.

               * Burns ticket; reduces Ledger.locked.

                  4. (Option A: optionally re-mint pts if user wants to exit hedge without redeeming asset.)

                  5. Vault Rebalance
 Admin function rebalance() may top-up vault with protocol revenue or convert staked yield into USDC to restore quota.

________________


3 · Guard-Rails & Risk Controls
Risk
	Mitigation
	Bank-run on vault
	• max_daily_hedge_pts global throttle.
• paused flag for emergency.
	Partner abuse (mass mint then hedge)
	Hedge flow uses global Points; any over-mint already limited by PartnerCap collateral.
	Oracle peg drift during crisis
	peg_rate adjustable via governance; redemption held if oracle_deviation > threshold.
	Duration abuse (instant round-trip)
	min_lock_epochs ensures tickets stay locked (e.g. ≥ 2 epochs ≈ 48 h).
	Vault insolvency
	Redemption reverts if vault.total_usdc < pts_locked; governance can patch from treasury; user keeps Points if redeem fails.
	________________


4 · Module Integration Tasks
Existing Script
	Needed Edits
	ledger.move
	Add locked_hedge: Table<address,u64>; adjust total_supply formula.
	escrow.move
	Support USDC mint/burn for vault top-ups; ensure funds isolated from general pool.
	admin.move
	Embed HedgeParams, expose set_params, pause_hedge.
	NEW hedge.move
	Implements create_ticket, redeem, rebalance.
	oracle.move
	Provide USDC price feed (or peg = 1) for peg safety.
	loan.move
	Optional: permit loan repayment with HedgeTicket burn (advanced).
	All functions adhere to Move 2024.alpha idioms (result<T,E> sugar, Clock object).
________________


5 · Collateral Impact
Locking points removes them from circulation → lowers potential sell pressure and reduces global inflation.
 USDC in vault remains protocol-owned; fee (fee_bps) on redemption can recycle to treasury to keep system solvent.