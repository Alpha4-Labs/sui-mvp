import type { SuiClient } from '@mysten/sui/client';
import type { StandardConnectFeature, StandardDisconnectFeature, StandardEventsFeature, SuiSignAndExecuteTransactionFeature, SuiSignPersonalMessageFeature, SuiSignTransactionFeature, Wallet } from '@mysten/wallet-standard';
import { ReadonlyWalletAccount } from '@mysten/wallet-standard';
import type { AuthProvider } from '../EnokiClient/type.js';
import { INTERNAL_ONLY_EnokiFlow } from './state.js';
import type { RegisterEnokiWalletsOptions } from './types.js';
export declare class EnokiWallet implements Wallet {
    #private;
    get id(): string;
    get name(): string;
    get provider(): AuthProvider;
    get icon(): `data:image/svg+xml;base64,${string}` | `data:image/webp;base64,${string}` | `data:image/png;base64,${string}` | `data:image/gif;base64,${string}`;
    get version(): "1.0.0";
    get chains(): readonly ["sui:mainnet" | "sui:testnet" | "sui:devnet"];
    get accounts(): ReadonlyWalletAccount[];
    get features(): StandardConnectFeature & StandardDisconnectFeature & StandardEventsFeature & SuiSignTransactionFeature & SuiSignAndExecuteTransactionFeature & SuiSignPersonalMessageFeature;
    constructor({ name, icon, flow, provider, clientId, redirectUrl, extraParams, client, windowFeatures, }: {
        icon: Wallet['icon'];
        name: string;
        flow: INTERNAL_ONLY_EnokiFlow;
        provider: AuthProvider;
        clientId: string;
        redirectUrl?: string;
        extraParams?: Record<string, string>;
        client: SuiClient;
        windowFeatures?: string | (() => string);
    });
}
export declare function registerEnokiWallets({ providers, client, network, windowFeatures, ...config }: RegisterEnokiWalletsOptions): {
    wallets: Partial<Record<AuthProvider, EnokiWallet>>;
    unregister: () => void;
};
export declare function isEnokiWallet(wallet: Wallet): wallet is EnokiWallet;
export declare function defaultWindowFeatures(): string;
